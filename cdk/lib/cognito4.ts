import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as cognito from 'aws-cdk-lib/aws-cognito';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as path from 'node:path';
export class Cognito4Stack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);
    // Cognito user pool
    const userPool1 = new cognito.UserPool(this, 'userPool1', {
      accountRecovery: cognito.AccountRecovery.EMAIL_ONLY,
      autoVerify: { email: true, phone: false },
      email: cognito.UserPoolEmail.withSES({ // Email configuration used to send email
       configurationSetName: cdk.Fn.importValue('ses-cfg-no-reply'),
       fromEmail: 'no-reply@webnt.dev',
       fromName: 'WebNT',
       sesRegion: 'eu-central-1',
      }),
      mfa: cognito.Mfa.OFF, // multi-factor authn
      passwordPolicy: {
        minLength: 6,
        requireLowercase: true,
        requireUppercase: true,
        requireDigits: true,
        requireSymbols: false,
        tempPasswordValidity: cdk.Duration.days(3),
      },
      standardAttributes: { // default set of user attributes
        email: {
          mutable: false,
          required: true,
        }
      },
      keepOriginal: { // what to do before new email/phone verification
        email: true,
      },
      signInAliases: { email: true }, // what attribute can be used for sign in
      userPoolName: 'cognito4-userpool',
      signInCaseSensitive: false, // case insensitive is preferred in most situations

			userVerification: { // SignUp verification email
				emailSubject: 'Hi, verify your email for WebNT cognito demo',
				emailBody: 'Thanks for signing up to our awesome demo! Your verification code is {####}',
				emailStyle: cognito.VerificationEmailStyle.CODE,
			},
			userInvitation: { // Invitation email
				emailSubject: 'Invitation to WebNT',
				emailBody: 'You\'ve been invited to WebNT demo with username: {username} and temporary password: {####}.',
			},
			selfSignUpEnabled: true, // whether users can sign up or must be created by admin
    });

		// User pool client
		const client1 = userPool1.addClient('userPool1-client1', {
			userPoolClientName: 'userPool1-client1',

			authFlows: { // what type of pasword verification/exchange can be used
				userPassword: true,
				userSrp: true,
			},
			authSessionValidity: cdk.Duration.minutes(3), // validity of token during authentication process
			preventUserExistenceErrors: true, // type of error if user does not exists in pool
			idTokenValidity: cdk.Duration.minutes(5),
			refreshTokenValidity: cdk.Duration.days(30),
			accessTokenValidity: cdk.Duration.minutes(5),
			enableTokenRevocation: true,

			oAuth: { // definition of oAuth
				flows: {
					authorizationCodeGrant: true, // authentication using code exchnage
				},
				callbackUrls: [ // allowed login callback urls
					'http://localhost:8000/',
					'http://localhost:8000/app.html'
				],
				logoutUrls: [ // allowed logout callback urls
					'http://localhost:8000/'
				],
				scopes: [ // scopes allowed by this client
					cognito.OAuthScope.EMAIL,
					cognito.OAuthScope.OPENID,
					cognito.OAuthScope.PHONE,
					cognito.OAuthScope.PROFILE,
				]
			},

		});

		// Domain for user pool, since we want to use OAuth flow, we need domain to authenticate agains
		userPool1.addDomain('CognitoDomain1', {
			cognitoDomain: {
				domainPrefix: 'asw-demo-cogniot4', // changed to asw, cogniot, domain cannot contain words 'AWS' 'cognito'
			},
		});

		// Defining 'adming-group' user group
		new cognito.CfnUserPoolGroup(this, 'userPool1AdminGroup', {
			userPoolId: userPool1.userPoolId,
			description: 'Admin group',
			groupName: 'admin-group',
			precedence: 0,
		});

		// not necessary, autogenerated by CDK, here just to test IAM definition
		// CDK recognizes that role exists and does not generate one
		// this role and polici allows Lambda ro execute itself
		const cognito4SignUpPostConfirmationRole = new iam.Role(this, 'cognito4SignUpPostConfirmationRole', {
			assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),
		});
		cognito4SignUpPostConfirmationRole.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName("service-role/AWSLambdaBasicExecutionRole"));

		// Lambda definition
		// this lambda will be invoked after successful sign up
		const cognito4SignUpPostConfirmation = new lambda.Function(this, 'cognito4SignUpPostConfirmation', {
			functionName: 'cognito4SignUpPostConfirmation',
			runtime: lambda.Runtime.NODEJS_18_X,
			handler: 'build/index.handler',
			code: lambda.Code.fromAsset(path.join(process.cwd(), '../lambda/cognito4SignUpPostConfirmation')),
			role: cognito4SignUpPostConfirmationRole,
		});

		// not necessary, autogenerated, this is generated regardless
		// CDK does not recognize, that this role is explicitly defined
		// and will try to generate it anyway
		// this permission allows cognito to trigger lambda
		//
		// cognito4SignUpPostConfirmation.addPermission('invokeByCognito', {
		// 	principal: new iam.ServicePrincipal('cognito-idp.amazonaws.com', {
		// 		conditions: {
		// 			ArnLike: {
		// 				"aws:SourceArn": userPool1.userPoolArn,
		// 			},
		// 		},
		// 	}),
		// });


		// lambda to be run after user is confirmed (after sign up)
		userPool1.addTrigger(cognito.UserPoolOperation.POST_CONFIRMATION, cognito4SignUpPostConfirmation);

		// allowing sign up lambda to call AdminAddUserToGroup function on cognito user pool
		cognito4SignUpPostConfirmation.role?.attachInlinePolicy(new iam.Policy(this, 'cognito4SignUpPostConfirmationAddToGroup', {
			statements: [new iam.PolicyStatement({
				actions: ['cognito-idp:AdminAddUserToGroup'],
				resources: [userPool1.userPoolArn],
			})],
		}));



		// defining trigger lambda to be run as user migration process
		userPool1.addTrigger(cognito.UserPoolOperation.USER_MIGRATION, new lambda.Function(this, 'cognito4SignInMigrate', {
			functionName: 'cognito4SignInMigrate',
			runtime: lambda.Runtime.NODEJS_18_X,
			handler: 'build/index.handler',
			code: lambda.Code.fromAsset(path.join(process.cwd(), '../lambda/cognito4SignInMigrate')),
		}));


		// well.... I love tags :)
    cdk.Tags.of(userPool1).add('cost-allocation', 'test');


  }
}
