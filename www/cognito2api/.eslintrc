{
  "root": true,
  "extends": [
    "airbnb-base",
    "airbnb-typescript",
		// "plugin:import/typescript",
  ],
	// "plugins": ["import"],
  "parserOptions": {
		// "files": ["*.ts", "*.mts"],
		// "extraFileExtensions": [".mjs"],
		"tsconfigRootDir": "./www/cognito2api",
    "project": ["tsconfig.json"] // Specify it only for TypeScript files

  },
	"env": {
		"browser": true,
//		"node": true
	},

  "globals": {
    "globalThis": false, // means it is not writeable
  },

  "ignorePatterns": ["**/*.js", "**/*.d.ts", "rollup.config.mjs", "**/*/*.mjs", "*.mjs"],

  "rules": {
    "class-methods-use-this": ["off"],
    "function-paren-newline": ["error", "consistent"],
    "import/extensions": 0,
    "import/no-extraneous-dependencies": ["off"],
		"import/no-unresolved": [2, { "ignore": ["\\.mjs$"] }],
    "import/prefer-default-export": ["off"],
    "linebreak-style": "off",
    "max-classes-per-file": ["off"],
    "max-len": ["error", 180, 2, {
      "ignoreUrls": true,
      "ignoreComments": true,
      "ignoreRegExpLiterals": true,
      "ignoreStrings": true,
      "ignoreTemplateLiterals": true,
    }],
    "no-console":"off",
    "no-multiple-empty-lines": ["error", { "max": 2, "maxEOF": 0 }],
    "no-param-reassign": ["off"],
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.",
      },
      // {
      //  "selector": "ForOfStatement",
      //  "message": "iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.",
      // },
      {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.",
      },
      {
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize.",
      },
    ],
		"no-tabs": "off",
    "no-underscore-dangle": "off",
    "object-curly-newline": ["error", { "minProperties": 7, "consistent": true,  }],
    "object-property-newline": ["error", { "allowAllPropertiesOnSameLine": true, }],
    "operator-linebreak": ["warn", "after"],
    "padded-blocks": ["off"],
    "prefer-destructuring": ["off"],
    "react/jsx-filename-extension": "off",

		"@typescript-eslint/comma-dangle": "off",
    "@typescript-eslint/no-use-before-define": ["off"],
    "@typescript-eslint/indent": ["error", "tab", {
			// "ignoredNodes": [
			// 		"FunctionExpression > .params[decorators.length > 0]",
			// 		"FunctionExpression > .params > :matches(Decorator, :not(:first-child))",
			// 		"ClassBody.body > PropertyDefinition[decorators.length > 0] > .key",
			// ],
	},],
    "@typescript-eslint/brace-style": ["error", "1tbs", { "allowSingleLine": true }],
    "@typescript-eslint/no-empty-function": ["error", { "allow": ["constructors"] }],

    "@typescript-eslint/no-unused-vars": ["off"]


  },
	// "settings": {
  //   "import/parsers": {
  //     "@typescript-eslint/parser": [".ts", ".mts"]
  //   },
	// 	"import/resolver": {
	// 		// "typescript": { "extensions": [ ".ts", ".mts", ".mjs" ] },
	// 		"node": { "extensions": [ ".js", ".mjs", ".ts", ".mts" ], "moduleDirectory": ["node_modules", "src/"], }
	// 	}
	// }

}
